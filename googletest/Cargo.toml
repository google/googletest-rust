# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[package]
name = "googletest"
version = "0.6.0"
keywords = ["unit", "matcher", "testing", "assertions"]
categories = ["development-tools", "development-tools::testing"]
description = "A rich assertion and matcher library inspired by GoogleTest for C++"
repository = "https://github.com/google/googletest-rust"
readme = "../README.md"
license = "Apache-2.0"
edition = "2021"
rust-version = "1.59.0"
authors = [
  "Bradford Hovinen <hovinen@google.com>",
  "Bastien Jacot-Guillarmod <bjacotg@google.com>",
  "Maciej Pietrzak <mpi@google.com>",
  "Martin Geisler <mgeisler@google.com>",
]

[dependencies]
googletest_macro = { path = "../googletest_macro", version = "0.6.0" }
num-traits = "0.2.15"
regex = "1.6.0"
anyhow = { version = "1", optional = true }
indoc = { version = "2", optional = true }
rstest = { version = "0.17.0", optional = true }
tokio = { version = "1", optional = true, features = ["time", "macros", "rt"] }

[dev-dependencies]
indoc = "2"

[[bin]]
name = "integration_tests"
path = "integration_tests/integration_tests.rs"
test = false
required-features = ["indoc"]

[[bin]]
name = "assert_predicate_with_failure"
path = "integration_tests/assert_predicate_with_failure.rs"
test = false

[[bin]]
name = "assertion_failure_in_subroutine"
path = "integration_tests/assertion_failure_in_subroutine.rs"
test = false

[[bin]]
name = "assertion_failures_with_short_structured_actual_values"
path = "integration_tests/assertion_failures_with_short_structured_actual_values.rs"
test = false

[[bin]]
name = "async_test_with_expect_that"
path = "integration_tests/async_test_with_expect_that.rs"
test = false
required_features = ["tokio"]

[[bin]]
name = "custom_error_message"
path = "integration_tests/custom_error_message.rs"
test = false

[[bin]]
name = "expect_that_failure"
path = "integration_tests/expect_that_failure.rs"
test = false

[[bin]]
name = "expect_pred_failure"
path = "integration_tests/expect_pred_failure.rs"
test = false

[[bin]]
name = "failure_due_to_fail_macro"
path = "integration_tests/failure_due_to_fail_macro.rs"
test = false

[[bin]]
name = "failure_due_to_fail_macro_with_empty_message"
path = "integration_tests/failure_due_to_fail_macro_with_empty_message.rs"
test = false

[[bin]]
name = "failure_due_to_fail_macro_with_format_arguments"
path = "integration_tests/failure_due_to_fail_macro_with_format_arguments.rs"
test = false

[[bin]]
name = "failure_due_to_returned_error"
path = "integration_tests/failure_due_to_returned_error.rs"
test = false

[[bin]]
name = "first_failure_aborts"
path = "integration_tests/first_failure_aborts.rs"
test = false

[[bin]]
name = "google_test_with_rstest"
path = "integration_tests/google_test_with_rstest.rs"
test = false
required-feature = ["rstest"]

[[bin]]
name = "non_fatal_failure_in_subroutine"
path = "integration_tests/non_fatal_failure_in_subroutine.rs"
test = false

[[bin]]
name = "simple_assertion_failure"
path = "integration_tests/simple_assertion_failure.rs"
test = false

[[bin]]
name = "simple_assertion_failure_with_assert_that"
path = "integration_tests/simple_assertion_failure_with_assert_that.rs"
test = false

[[bin]]
name = "test_returning_anyhow_error"
path = "integration_tests/test_returning_anyhow_error.rs"
test = false
required-features = ["anyhow"]

[[bin]]
name = "two_expect_pred_failures"
path = "integration_tests/two_expect_pred_failures.rs"
test = false

[[bin]]
name = "two_expect_that_failures"
path = "integration_tests/two_expect_that_failures.rs"
test = false

[[bin]]
name = "two_non_fatal_failures"
path = "integration_tests/two_non_fatal_failures.rs"
test = false

[[bin]]
name = "verify_predicate_with_failure"
path = "integration_tests/verify_predicate_with_failure.rs"
test = false

[[bin]]
name = "verify_predicate_with_failure_as_method_in_submodule"
path = "integration_tests/verify_predicate_with_failure_as_method_in_submodule.rs"
test = false
